buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'
}
repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-js-wrappers" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    mavenCentral()
}

def kotlin_version = '1.3.41'
def ktor_version = '1.1.3'
def logback_version = '1.2.3'

kotlin {
    jvm()
    js {
        // for translation kotlin into js
        compilations.all {
            kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "umd"
                sourceMap = true
                sourceMapEmbedSources = "always"
                metaInfo = true
            }
        }

        compilations.main {
            tasks.getByName(compileKotlinTaskName).kotlinOptions {
                main = "call"
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains:kotlin-css:1.0.0-pre.82-kotlin-$kotlin_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "org.jetbrains:kotlin-css:1.0.0-pre.82-kotlin-$kotlin_version"
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "org.jetbrains:kotlin-css-jvm:1.0.0-pre.82-kotlin-$kotlin_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains:kotlin-extensions:1.0.1-pre.82-kotlin-$kotlin_version"
                implementation "org.jetbrains:kotlin-css:1.0.0-pre.82-kotlin-$kotlin_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}
// path to web directory relative to project build directory
def webFolder = new File(project.buildDir, "../src/jsMain/web")
// path to js compilations directory
def jsCompilations = kotlin.targets.js.compilations
// copy js compilations into web folder
task populateWebFolder(dependsOn: [jsMainClasses]) {
    doLast {
        copy {
            from jsCompilations.main.output
            from kotlin.sourceSets.jsMain.resources.srcDirs
            jsCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into webFolder
        }
    }
}

jsJar.dependsOn(populateWebFolder)

task run(type: JavaExec, dependsOn: [jvmMainClasses, jsJar]) {
    main = 'io.ktor.server.netty.EngineMain'
    classpath { [
            kotlin.targets.jvm.compilations.main.output.allOutputs.files,
            configurations.jvmRuntimeClasspath,
    ] }
    args = []
}